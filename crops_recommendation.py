# -*- coding: utf-8 -*-
"""Crops Recommendation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZTyIYLLRgL6uebUNAM1FBUJWmP_GTETR

# Crop Recommendation System Using ML Model

##### AIM :- The aim of this project is to develop a Machine Learning-based Crop Recommendation Model that predicts the most suitable crop for cultivation based on key soil and environmental parameters. The model utilizes the following features to provide accurate recommendations:

- N (Nitrogen): The ratio of nitrogen content in the soil, measured in kg/ha, essential for assessing soil fertility and crop nutrient requirements.
- P (Phosphorous): The ratio of phosphorous content in the soil, measured in kg/ha, crucial for root development and energy transfer in plants.
- K (Potassium): The ratio of potassium content in the soil, measured in kg/ha, important for improving plant immunity and quality.
- Temperature: The ambient temperature, measured in degrees Celsius, which influences crop growth and development.
- Humidity: The relative humidity, measured as a percentage, which affects water availability and plant respiration.
- pH: The pH value of the soil, indicating its acidity or alkalinity, which determines nutrient availability and suitability for
  different crops.
- Rainfall: The amount of rainfall, measured in mm, which impacts soil moisture levels and crop water requirements.
##### The goal of the model is to assist farmers and agricultural experts in optimizing crop selection to maximize yield, reduce resource wastage, and ensure sustainable farming practices. By leveraging historical data and machine learning algorithms, the model aims to provide data-driven, actionable insights for modern agriculture.

## 1. Import Required libraries
"""

import pandas as pd
import numpy as np
import random
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
warnings.filterwarnings('ignore')

"""## 2. Importing dataset"""

cropdf = pd.read_csv("/content/drive/MyDrive/Colab Notebooks/Crop_recommendation.csv")
cropdf.head()

"""## 3. About DataSet"""

cropdf.shape

print('List of Columns',cropdf.columns)

print("Number of various crops: ", len(cropdf['label'].unique()))
print("List of crops: ", cropdf['label'].unique())

cropdf.info()

cropdf.hist()

"""## 4. Checking Null and NA values in DataSet"""

cropdf.isnull().sum()



"""## 5. Separating independent and dependent features"""

X = cropdf.drop('label', axis=1)
y = cropdf['label']

X

y

"""## 6. Split dataset For training and testing"""

from sklearn.model_selection import train_test_split
X_train, X_test, Y_train, Y_test = train_test_split(X, y, test_size = 0.2,
                                                    shuffle = True, random_state = 0)

X_train

Y_train

"""## 8. Building ML Model
- KNN
- Decsion tree
- Logistic regression
- Random Forest
- SVM
- NBC
"""

def models(X_train, Y_train):
    # 1. K-Nearest Neighbors
    from sklearn.neighbors import KNeighborsClassifier
    knc = KNeighborsClassifier(n_neighbors=5, metric='minkowski', p=2)
    knc.fit(X_train, Y_train)

    # 2. Decision Tree
    from sklearn.tree import DecisionTreeClassifier
    dtc = DecisionTreeClassifier(random_state=0, criterion="entropy")
    dtc.fit(X_train, Y_train)

    # 3. Logistic Regression
    from sklearn.linear_model import LogisticRegression
    lr = LogisticRegression(random_state=0)
    lr.fit(X_train, Y_train)

    # 4. Random Forest
    from sklearn.ensemble import RandomForestClassifier
    rfc = RandomForestClassifier(random_state=0, criterion="entropy", n_estimators=10)
    rfc.fit(X_train, Y_train)

    # 5. Support Vector Machine
    from sklearn.svm import SVC
    svc = SVC(random_state=0)
    svc.fit(X_train, Y_train)

    # 6. Naive Bayes Classifier
    from sklearn.naive_bayes import GaussianNB
    nbc = GaussianNB()
    nbc.fit(X_train, Y_train)

    print('[0] K-Nearest Neighbors accuracy:', knc.score(X_train, Y_train))
    print('[1] Decision Tree accuracy:', dtc.score(X_train, Y_train))
    print('[2] Logistic Regression accuracy:', lr.score(X_train, Y_train))
    print('[3] Random Forest accuracy:', rfc.score(X_train, Y_train))
    print('[4] Support Vector Machine accuracy:', svc.score(X_train, Y_train))
    print('[5] Naive Bayes Classifier accuracy:', nbc.score(X_train, Y_train))

    return knc, dtc, lr, rfc, svc, nbc
model = models(X_train,Y_train)

"""## 8. Model Prediction
 - Naive Bayes Classifier has the highest accuracy so we will predict new input by NBC
"""

from sklearn.naive_bayes import GaussianNB
model1 = GaussianNB()

model1.fit(X_train, Y_train)

y_pred = model1.predict(X_test)

"""## (9). Function to predict new data"""

# Define the prediction function
def predict_new_data(N, P, K, T, H, PH, R):
    # Create a new DataFrame with the provided input features
    new_data = pd.DataFrame({
        'N': [N],
        'P': [P],
        'K': [K],
        'temperature': [T],
        'humidity': [H],
        'ph': [PH],
        'rainfall': [R]
    })
    # Predict using the model (assumes 'model1' is pre-trained and available)
    prediction = model1.predict(new_data)
    predicted_class = prediction[0]
    return predicted_class

# Example: Predicting for new input data
N = float(input("Enter value for N (Nitrogen): "))
P = float(input("Enter value for P (Phosphorous): "))
K = float(input("Enter value for K (Potassium): "))
T = float(input("Enter value for temperature: "))
H = float(input("Enter value for humidity: "))
PH = float(input("Enter value for pH: "))
R = float(input("Enter value for rainfall: "))

# Call the prediction function
predicted_class = predict_new_data(N, P, K, T, H, PH, R)

# Print the prediction result
print(f"The predicted class for the input data is: {predicted_class}")

newdata=model1.predict([[90,42,43,20.879744,82.002744,6.502985,202.935536]])
newdata

"""# *************************************************************************

# About Me:-
## Name - Aatish Kumar Baitha
  - M.Tech(Data Science)
- YouTube
  - https://www.youtube.com/@EngineeringWithAatish/playlists
- My Linkedin Profile
  - https://www.linkedin.com/in/aatish-kumar-baitha-ba9523191
- My Blog
  - https://computersciencedatascience.blogspot.com/
- My Github Profile
  - https://github.com/Aatishkb

# Thank you!

# *************************************************************************
"""